import os
import json
import base64
import hashlib
from flask import Flask, request
import telebot
from threading import Thread

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
LIQPAY_PUBLIC_KEY = os.getenv("LIQPAY_PUBLIC_KEY")
LIQPAY_PRIVATE_KEY = os.getenv("LIQPAY_PRIVATE_KEY")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
paid_users = set()

# üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
def create_payment_link(telegram_id):
    data = {
        "version": "3",
        "action": "pay",
        "amount": "1",
        "currency": "UAH",
        "description": "–¢–µ—Å—Ç–æ–≤–∞ –æ–ø–ª–∞—Ç–∞ Emotracker",
        "order_id": str(telegram_id),
        "sandbox": 1,
        "server_url": "https://emotracker-bot.onrender.com/webhook"
    }

    json_data = json.dumps(data)
    encoded_data = base64.b64encode(json_data.encode()).decode()
    sign_string = LIQPAY_PRIVATE_KEY + encoded_data + LIQPAY_PRIVATE_KEY
    signature = base64.b64encode(hashlib.sha1(sign_string.encode()).digest()).decode()

    return f"https://www.liqpay.ua/api/3/checkout?data={encoded_data}&signature={signature}"

# üí¨ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä.\n–ù–∞–∂–º–∏—Ç–µ /buy, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")

# üí≥ –ö–æ–º–∞–Ω–¥–∞ /buy
@bot.message_handler(commands=['buy'])
def send_payment_link(message):
    telegram_id = message.chat.id
    payment_url = create_payment_link(telegram_id)
    bot.send_message(telegram_id,
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LiqPay:\n{payment_url}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ñ–∞–π–ª.")

# üìÅ –ö–æ–º–∞–Ω–¥–∞ /getfile
@bot.message_handler(commands=['getfile'])
def send_file(message):
    user_id = message.chat.id
    if user_id in paid_users:
        try:
            with open("ilovepdf_merged.pdf", "rb") as f:
                bot.send_document(user_id, f)
        except Exception as e:
            bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        bot.send_message(user_id,
            "üí° –ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏. –ù–∞–∂–º–∏—Ç–µ /buy, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.")

# üîÅ Webhook –æ—Ç LiqPay
@app.route('/webhook', methods=['POST'])
def liqpay_webhook():
    data = request.json
    print("Webhook –ø–æ–ª—É—á–µ–Ω:", data)

    if data.get("status") == "success":
        telegram_id = int(data.get("order_id"))
        paid_users.add(telegram_id)

        bot.send_message(telegram_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª:")
        try:
            with open("ilovepdf_merged.pdf", "rb") as f:
                bot.send_document(telegram_id, f)
        except Exception as e:
            bot.send_message(telegram_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

    return "OK", 200

# üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    Thread(target=lambda: bot.polling(non_stop=True)).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
